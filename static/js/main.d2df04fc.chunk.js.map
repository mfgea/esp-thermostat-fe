{"version":3,"sources":["components/Time.jsx","hooks/use-interval.js","components/TemperatureCard.jsx","components/CurrentTemperature/index.jsx","components/ThermostatControls.jsx","components/ThermostatStatus.jsx","components/Thermostat.jsx","App.js","serviceWorker.js","index.js"],"names":["getFormattedDate","format","Date","locale","es","Time","useState","time","setTime","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","className","TemperatureCard","icon","value","CurrentTemperature","ambientTemp","formatNumber","num","toLocaleString","navigator","language","minimumFractionDigits","ThermostatControls","props","targetTemp","powerState","programmedTemp","programmedOnEnabled","programmedOffEnabled","programmedOnTime","programmedOffTime","onPowerChange","onTargetTemperatureChange","onProgrammedTemperatureChange","onProgrammedOnToggle","onProgrammedOffToggle","onProgrammedOnTime","onProgrammedOffTime","activePane","setActivePane","setManualPane","useCallback","setAutoPane","onClick","htmlFor","onChange","e","Boolean","target","checked","icons","disabled","type","ThermostatStatus","boilerState","uptime","boilerClassName","Thermostat","apiDomain","setAmbientTemp","setTargetTemp","setPowerState","setBoilerState","setProgrammedTemp","setProgrammedOnTime","setProgrammedOffTime","setProgrammedOnEnabled","setProgrammedOffEnabled","loading","setLoading","loadData","setLoadData","setUptime","interval","fetch","then","resp","json","data","temperature","desiredTemp","state","temp","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2df04fc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { format } from 'date-fns'\nimport { es } from 'date-fns/locale'\nimport { useInterval } from '../hooks';\n\nconst getFormattedDate = () => {\n    return format(new Date(), 'PP H:mm', { locale: es });\n}\n\nexport const Time = () => {\n    let [time, setTime] = useState(getFormattedDate());\n\n    useInterval(() => setTime(getFormattedDate()), 1000)\n    return (<div className=\"time\">{time}</div>);\n}\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n","import React from 'react';\nimport './TemperatureCard.scss';\n\nexport const TemperatureCard = ({ icon, value }) => {\n    return (\n        <div className=\"temperature-card\">\n            <i className={icon} />\n            <span className=\"temp-value\">{value} &deg;C</span>\n        </div>\n    );\n};\n","import React from 'react';\nimport { TemperatureCard } from '../TemperatureCard';\n//import WeatherInfo from '../util/openweather-maps';\n\nimport './CurrentTemperature.scss';\n\nexport const CurrentTemperature = ({ ambientTemp }) => (\n    <section>\n        <div className=\"temp-cards\">\n            <TemperatureCard\n                icon=\"fa fa-home\"\n                value={ambientTemp} />\n            <TemperatureCard\n                icon=\"wi wi-day-rain\"\n                value=\"5\" />\n        </div>\n        <div className=\"city-name\">Mar del Plata</div>\n    </section>\n);","import React, { useCallback, useState } from \"react\";\nimport Toggle from \"react-toggle\";\nimport Checkbox from \"rc-checkbox\";\nimport \"react-toggle/style.css\";\nimport \"../styles/rc-checkbox.scss\";\nimport \"./ThermostatControls.scss\";\n\nconst formatNumber = (num) =>\n  num.toLocaleString(navigator.language, { minimumFractionDigits: 1 });\n\nexport const ThermostatControls = (props) => {\n  const {\n    targetTemp,\n    powerState,\n    programmedTemp,\n    programmedOnEnabled,\n    programmedOffEnabled,\n    programmedOnTime,\n    programmedOffTime,\n    onPowerChange,\n    onTargetTemperatureChange,\n    onProgrammedTemperatureChange,\n    onProgrammedOnToggle,\n    onProgrammedOffToggle,\n    onProgrammedOnTime,\n    onProgrammedOffTime,\n  } = props;\n  let [activePane, setActivePane] = useState(\"manual\");\n  const setManualPane = useCallback(() => setActivePane(\"manual\"), []);\n  const setAutoPane = useCallback(() => setActivePane(\"auto\"), []);\n  const _onPowerChange = (e) => {\n    onPowerChange(Boolean(e.target.checked));\n  };\n  const _onIncTemp = () => onTargetTemperatureChange(targetTemp + 0.5);\n  const _onDecTemp = () => onTargetTemperatureChange(targetTemp - 0.5);\n  const _onIncProgrammedTemp = () =>\n    onProgrammedTemperatureChange(programmedTemp + 0.5);\n  const _onDecProgrammedTemp = () =>\n    onProgrammedTemperatureChange(programmedTemp - 0.5);\n  const _onProgrammedOnTime = (e) => onProgrammedOnTime(e.target.value || null);\n  const _onProgrammedOffTime = (e) => onProgrammedOffTime(e.target.value || null);\n\n  const _onProgrammedOnToggle = (e) => {\n      onProgrammedOnToggle(e.target.checked);\n  }\n  const _onProgrammedOffToggle = (e) => onProgrammedOffToggle(e.target.checked);\n\n  return (\n    <section>\n      <div className=\"power-controls\">\n        <button\n          onClick={setManualPane}\n          className={activePane === \"manual\" ? \"active\" : \"\"}\n        >\n          Manual\n        </button>\n        <button\n          onClick={setAutoPane}\n          className={activePane === \"auto\" ? \"active\" : \"\"}\n        >\n          Auto\n        </button>\n      </div>\n\n      {activePane === \"manual\" && (\n        <div className=\"controls-pane manual-controls\">\n          <div className=\"power-toggle\">\n            <label htmlFor=\"power-switch\">Power</label>\n            <Toggle\n              id=\"power-switch\"\n              onChange={_onPowerChange}\n              icons={false}\n              className=\"power-switch\"\n              checked={powerState}\n            />\n          </div>\n          <div className=\"temp-controls\">\n            <button className=\"temperature-button\" onClick={_onDecTemp}>\n              <i className=\"fa fa-minus-circle fa-3x\" />\n            </button>\n            <span className=\"temp-value\">\n              {formatNumber(targetTemp)} &deg;C\n            </span>\n            <button className=\"temperature-button\" onClick={_onIncTemp}>\n              <i className=\"fa fa-plus-circle fa-3x\" />\n            </button>\n          </div>\n        </div>\n      )}\n\n      {activePane === \"auto\" && (\n        <div className=\"controls-pane auto-controls\">\n          <div className=\"time-pickers\">\n            <div className=\"schedule-control\" disabled={!programmedOnEnabled}>\n              <Checkbox onClick={_onProgrammedOnToggle} checked={programmedOnEnabled} />\n              <label>On</label>\n              <input type=\"time\" disabled={!programmedOnEnabled} value={programmedOnTime} onChange={_onProgrammedOnTime} />\n            </div>\n            <div className=\"schedule-control\" disabled={!programmedOffEnabled}>\n              <Checkbox onClick={_onProgrammedOffToggle} checked={programmedOffEnabled} />\n              <label>Off</label>\n              <input type=\"time\" disabled={!programmedOffEnabled} value={programmedOffTime} onChange={_onProgrammedOffTime} />\n            </div>\n          </div>\n\n          <div className=\"programmed-temp\" disabled={!programmedOnEnabled}>\n            <button className=\"temperature-button\" disabled={!programmedOnEnabled} onClick={_onIncProgrammedTemp}>\n              <i className=\"fa fa-plus-circle fa-3x\" />\n            </button>\n            <span className=\"temp-value\">\n              {formatNumber(programmedTemp)} &deg;C\n            </span>\n            <button className=\"temperature-button\" disabled={!programmedOnEnabled} onClick={_onDecProgrammedTemp}>\n              <i className=\"fa fa-minus-circle fa-3x\" />\n            </button>\n          </div>\n        </div>\n      )}\n    </section>\n  );\n};\n","import React from 'react';\nimport './ThermostatStatus.scss';\n\nexport const ThermostatStatus = ({ boilerState, uptime }) => {\n    const boilerClassName = `boiler-state ${boilerState ? 'on': 'off'}`;\n\n    return (\n        <section id=\"status-container\">\n            <div className=\"uptime\">\n                Uptime\n                <span className=\"uptime-value\">{uptime}</span>\n            </div>\n            <div className={boilerClassName}>\n                <i className=\"fa fa-fire fa-3x\" />\n            </div>\n        </section>\n    );\n};","import React, { useEffect, useState } from 'react';\nimport { Time } from './Time';\nimport { CurrentTemperature } from './CurrentTemperature';\nimport { ThermostatControls } from './ThermostatControls';\nimport { ThermostatStatus } from './ThermostatStatus';\n\nimport './Thermostat.scss';\n\nexport const Thermostat = ({ apiDomain }) => {\n    const [ambientTemp, setAmbientTemp] = useState(18);\n    const [targetTemp, setTargetTemp] = useState(21);\n    const [powerState, setPowerState] = useState(true);\n    const [boilerState, setBoilerState] = useState(true);\n\n    const [programmedTemp, setProgrammedTemp] = useState(22);\n    const [programmedOnTime, setProgrammedOnTime] = useState(null);\n    const [programmedOffTime, setProgrammedOffTime] = useState(null);\n    const [programmedOnEnabled, setProgrammedOnEnabled] = useState(false);\n    const [programmedOffEnabled, setProgrammedOffEnabled] = useState(false);\n\n    const [loading, setLoading] = useState(false);\n    const [loadData, setLoadData] = useState(true);\n    const [uptime, setUptime] = useState(\"00:00:00:00\");\n  \n    useEffect(() =>{\n      let interval = setInterval(() => setLoadData(true), (1000 * 5))\n      //destroy interval on unmount\n      return () => clearInterval(interval)\n    });\n  \n    useEffect(() => {\n      if (!loading && loadData) {\n        setLoading(true);\n        fetch(`${apiDomain}status`)\n          .then(resp => resp.json())\n          .then(data => {\n            setAmbientTemp(data.temperature);\n            setTargetTemp(data.desiredTemp);\n            setBoilerState(data.boilerState);\n            setPowerState(data.powerState);\n            setUptime(data.uptime);\n          })\n      }\n    }, [loading, loadData, apiDomain])  \n\n    const onPowerChange = (state) => setPowerState(state);\n    const onTargetTemperatureChange = (temp) => setTargetTemp(temp);\n    const onProgrammedTemperatureChange = (temp) => setProgrammedTemp(temp);\n    const onProgrammedOnTime = (time) => setProgrammedOnTime(time);\n    const onProgrammedOffTime = (time) => setProgrammedOffTime(time);\n    const onProgrammedOnToggle = (state) => setProgrammedOnEnabled(state);\n    const onProgrammedOffToggle = (state) => setProgrammedOffEnabled(state);\n\n    return (\n        <div className=\"thermostat\">\n            <header>\n                <h1>Thermostat</h1>\n                <Time />\n            </header>\n            \n            <CurrentTemperature\n                ambientTemp={ambientTemp}\n            />\n\n            <ThermostatControls\n                targetTemp={targetTemp}\n                powerState={powerState}\n                programmedTemp={programmedTemp}\n                programmedOnTime={programmedOnTime}\n                programmedOffTime={programmedOffTime}\n                programmedOnEnabled={programmedOnEnabled}\n                programmedOffEnabled={programmedOffEnabled}\n                onPowerChange={onPowerChange}\n                onTargetTemperatureChange={onTargetTemperatureChange}\n                onProgrammedTemperatureChange={onProgrammedTemperatureChange}\n                onProgrammedOnTime={onProgrammedOnTime}\n                onProgrammedOffTime={onProgrammedOffTime}\n                onProgrammedOnToggle={onProgrammedOnToggle}\n                onProgrammedOffToggle={onProgrammedOffToggle}\n            />\n\n            <ThermostatStatus\n                boilerState={boilerState}\n                uptime={uptime}\n            />\n        </div>\n    );\n};\n","import React from 'react';\nimport { Thermostat } from \"./components/Thermostat\";\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div>\n      <Thermostat\n        apiDomain={window.apiDomain}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}